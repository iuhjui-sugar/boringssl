{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "5755c51e_f6407905",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 17331
      },
      "writtenOn": "2024-08-15T16:41:29Z",
      "side": 1,
      "message": "Looks good (but we should probably wait for NIST to update their tests).",
      "revId": "1f603458ac5ac59ca85e960456625b95b97f8b86",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3c64ee81_a5998e31",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 5005
      },
      "writtenOn": "2024-08-19T18:29:14Z",
      "side": 1,
      "message": "I\u0027m giving up on the NIST server actually working. (It\u0027s still timing out right now.)",
      "parentUuid": "5755c51e_f6407905",
      "revId": "1f603458ac5ac59ca85e960456625b95b97f8b86",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fffedee8_44dba8a6",
        "filename": "crypto/mldsa/internal.h",
        "patchSetId": 8
      },
      "lineNbr": 33,
      "author": {
        "id": 5415
      },
      "writtenOn": "2024-08-15T23:22:10Z",
      "side": 1,
      "message": "s/Returns/It returns/ across the file",
      "range": {
        "startLine": 33,
        "startChar": 3,
        "endLine": 33,
        "endChar": 10
      },
      "revId": "1f603458ac5ac59ca85e960456625b95b97f8b86",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8782072c_ad8bb4dd",
        "filename": "crypto/mldsa/internal.h",
        "patchSetId": 8
      },
      "lineNbr": 33,
      "author": {
        "id": 5005
      },
      "writtenOn": "2024-08-16T18:49:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fffedee8_44dba8a6",
      "range": {
        "startLine": 33,
        "startChar": 3,
        "endLine": 33,
        "endChar": 10
      },
      "revId": "1f603458ac5ac59ca85e960456625b95b97f8b86",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "943ff9e3_f9179111",
        "filename": "crypto/mldsa/mldsa.c",
        "patchSetId": 8
      },
      "lineNbr": 56,
      "author": {
        "id": 5415
      },
      "writtenOn": "2024-08-15T23:22:10Z",
      "side": 1,
      "message": "I assume all coefficients are expected to be fully reduced?\n\nEdit: Ah, no, I see we store a variety of things in here. I guess the thinking is we\u0027ll rely on a ton of asserts for the different bounds here?",
      "revId": "1f603458ac5ac59ca85e960456625b95b97f8b86",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1dc18605_96ed8142",
        "filename": "crypto/mldsa/mldsa.c",
        "patchSetId": 8
      },
      "lineNbr": 56,
      "author": {
        "id": 17331
      },
      "writtenOn": "2024-08-16T08:04:19Z",
      "side": 1,
      "message": "Yes coefficients are expected to be kept in the `[0, kPrime)` range here, which makes things easier to reason about (feel free to add more asserts of course, but adding them on each arithmetic operation would significantly affect performance).\n\nNote that the implementation by Dilithium authors uses a signed representation (within `[-kPrime/2, kPrime/2]`) which may or may not be more efficient (I didn\u0027t check) and doesn\u0027t reduce every time, but here as I understood the goal is to have a reference implementation, not an optimized one (in particular, SIMD would speed things up, notably for the NTTs and for the Keccaks).",
      "parentUuid": "943ff9e3_f9179111",
      "revId": "1f603458ac5ac59ca85e960456625b95b97f8b86",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b72b3e44_d9d9f7c2",
        "filename": "crypto/mldsa/mldsa.c",
        "patchSetId": 8
      },
      "lineNbr": 151,
      "author": {
        "id": 5415
      },
      "writtenOn": "2024-08-15T23:22:10Z",
      "side": 1,
      "message": "This works, but `0u - x` should work just as well to appease MSVC and is more straightforward.",
      "range": {
        "startLine": 151,
        "startChar": 72,
        "endLine": 151,
        "endChar": 78
      },
      "revId": "1f603458ac5ac59ca85e960456625b95b97f8b86",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8e8da1be_728df616",
        "filename": "crypto/mldsa/mldsa.c",
        "patchSetId": 8
      },
      "lineNbr": 151,
      "author": {
        "id": 5005
      },
      "writtenOn": "2024-08-16T18:49:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b72b3e44_d9d9f7c2",
      "range": {
        "startLine": 151,
        "startChar": 72,
        "endLine": 151,
        "endChar": 78
      },
      "revId": "1f603458ac5ac59ca85e960456625b95b97f8b86",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "29cf5346_a96d55bb",
        "filename": "crypto/mldsa/mldsa.c",
        "patchSetId": 8
      },
      "lineNbr": 180,
      "author": {
        "id": 5415
      },
      "writtenOn": "2024-08-15T23:22:10Z",
      "side": 1,
      "message": "This only works if `x \u003c\u003d (uint64_t)kPrime \u003c\u003c 32`, right? Maybe worth a `declassify_assert` in there.",
      "revId": "1f603458ac5ac59ca85e960456625b95b97f8b86",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6afa471d_9c0b66e4",
        "filename": "crypto/mldsa/mldsa.c",
        "patchSetId": 8
      },
      "lineNbr": 180,
      "author": {
        "id": 17331
      },
      "writtenOn": "2024-08-16T08:04:19Z",
      "side": 1,
      "message": "This is always* called with the product of two numbers reduced modulo `kPrime`, so this is always the case.\n\n*Technically in the NTT^-1 it\u0027s called once with an operand of the product that\u0027s `\u003c 2 * kPrime`, so we could add another reduction in case although that wouldn\u0027t change the result.",
      "parentUuid": "29cf5346_a96d55bb",
      "revId": "1f603458ac5ac59ca85e960456625b95b97f8b86",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9676f77c_e7ca779b",
        "filename": "crypto/mldsa/mldsa.c",
        "patchSetId": 8
      },
      "lineNbr": 180,
      "author": {
        "id": 5415
      },
      "writtenOn": "2024-08-16T12:45:16Z",
      "side": 1,
      "message": "The comment was not that this may not be the case. It is that we should write down our preconditions, and asserts are useful ways to write them down.",
      "parentUuid": "6afa471d_9c0b66e4",
      "revId": "1f603458ac5ac59ca85e960456625b95b97f8b86",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c33f9909_bc79f7d0",
        "filename": "crypto/mldsa/mldsa.c",
        "patchSetId": 8
      },
      "lineNbr": 180,
      "author": {
        "id": 5005
      },
      "writtenOn": "2024-08-16T18:49:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9676f77c_e7ca779b",
      "revId": "1f603458ac5ac59ca85e960456625b95b97f8b86",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2fffeca1_b6d8b160",
        "filename": "crypto/mldsa/mldsa.c",
        "patchSetId": 8
      },
      "lineNbr": 198,
      "author": {
        "id": 5415
      },
      "writtenOn": "2024-08-15T23:22:10Z",
      "side": 1,
      "message": "(I don\u0027t understand NTTs and am just assuming this is correct. Ditto for NTT inverse.)",
      "revId": "1f603458ac5ac59ca85e960456625b95b97f8b86",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "029ddddf_3b4e898c",
        "filename": "crypto/mldsa/mldsa.c",
        "patchSetId": 8
      },
      "lineNbr": 239,
      "author": {
        "id": 17331
      },
      "writtenOn": "2024-08-16T08:04:19Z",
      "side": 1,
      "message": "We could add one more reduce_once here, but it would be ultimately redundant.",
      "range": {
        "startLine": 239,
        "startChar": 55,
        "endLine": 239,
        "endChar": 76
      },
      "revId": "1f603458ac5ac59ca85e960456625b95b97f8b86",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "46ec232e_4ead22c0",
        "filename": "crypto/mldsa/mldsa.c",
        "patchSetId": 8
      },
      "lineNbr": 239,
      "author": {
        "id": 5415
      },
      "writtenOn": "2024-08-16T12:45:16Z",
      "side": 1,
      "message": "Montgomery reduction works up to q*R, a looser bound than q^2, and 2*q \u003c R, so I believe this is fine. But that is actually somewhat subtle, so all the more reason it is important to document the preconditions, test the preconditions with an assert, and add a comment here because the bound is less obvious.",
      "parentUuid": "029ddddf_3b4e898c",
      "range": {
        "startLine": 239,
        "startChar": 55,
        "endLine": 239,
        "endChar": 76
      },
      "revId": "1f603458ac5ac59ca85e960456625b95b97f8b86",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4cbc9219_7bbd841d",
        "filename": "crypto/mldsa/mldsa.c",
        "patchSetId": 8
      },
      "lineNbr": 239,
      "author": {
        "id": 5415
      },
      "writtenOn": "2024-08-16T12:46:09Z",
      "side": 1,
      "message": "Oops, Gerrit has interpreted my equations as Markdown. Reformatting:\n\nMontgomery reduction works up to `q*R`, a looser bound than `q^2`, and `2*q \u003c R`, so I believe this is fine. But that is actually somewhat subtle, so all the more reason it is important to document the preconditions, test the preconditions with an assert, and add a comment here because the bound is less obvious.",
      "parentUuid": "46ec232e_4ead22c0",
      "range": {
        "startLine": 239,
        "startChar": 55,
        "endLine": 239,
        "endChar": 76
      },
      "revId": "1f603458ac5ac59ca85e960456625b95b97f8b86",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "66419798_8569a712",
        "filename": "crypto/mldsa/mldsa.c",
        "patchSetId": 8
      },
      "lineNbr": 239,
      "author": {
        "id": 5005
      },
      "writtenOn": "2024-08-16T18:49:11Z",
      "side": 1,
      "message": "See if you\u0027re happy with the updates here. (Perhaps asserting the bounds on `odd` and `even` is superfluous?)",
      "parentUuid": "4cbc9219_7bbd841d",
      "range": {
        "startLine": 239,
        "startChar": 55,
        "endLine": 239,
        "endChar": 76
      },
      "revId": "1f603458ac5ac59ca85e960456625b95b97f8b86",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b2548037_4c221d9d",
        "filename": "crypto/mldsa/mldsa.c",
        "patchSetId": 8
      },
      "lineNbr": 239,
      "author": {
        "id": 17331
      },
      "writtenOn": "2024-08-19T09:45:07Z",
      "side": 1,
      "message": "There\u0027s ultimately a lot of superfluous checks, but given David\u0027s note that they don\u0027t make it in release mode anyway that\u0027s fine to have them, right? I just find it odd to only have them in the reverse NTT, the forward NTT is quite similar and should have similar checks for consistency.",
      "parentUuid": "66419798_8569a712",
      "range": {
        "startLine": 239,
        "startChar": 55,
        "endLine": 239,
        "endChar": 76
      },
      "revId": "1f603458ac5ac59ca85e960456625b95b97f8b86",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f8722554_b6122711",
        "filename": "crypto/mldsa/mldsa.c",
        "patchSetId": 8
      },
      "lineNbr": 239,
      "author": {
        "id": 5415
      },
      "writtenOn": "2024-08-19T17:49:01Z",
      "side": 1,
      "message": "(Comment LGTM. No opinions on the added asserts on `step_root`, `even`, and `odd`. I was just after the comment.)\n\n\u003e I just find it odd to only have them in the reverse NTT, the forward NTT is quite similar and should have similar checks for consistency.\n\nThe forward NTT reduces the product of two already reduced values, which is straightforwardly OK. Montgomery reduction always has q \u003c R \u003d\u003e q*q \u003c q*R because otherwise it\u0027s kinda pointless.\n\nThe reverse NTT reduces the product of a q-bounded value *and a 2q-bounded value*. This is not straightforwardly OK. It not always true that 2q \u003c R in Montgomery reduction. It just is true here.\n\nI agree that the added *assertions* are equally justified in both, but the comment is load-bearing in reverse NTT in a way that it isn\u0027t for forward NTT.",
      "parentUuid": "b2548037_4c221d9d",
      "range": {
        "startLine": 239,
        "startChar": 55,
        "endLine": 239,
        "endChar": 76
      },
      "revId": "1f603458ac5ac59ca85e960456625b95b97f8b86",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7513aabc_f20221fd",
        "filename": "crypto/mldsa/mldsa.c",
        "patchSetId": 8
      },
      "lineNbr": 239,
      "author": {
        "id": 5005
      },
      "writtenOn": "2024-08-19T18:29:14Z",
      "side": 1,
      "message": "I\u0027ve added the same sort of comment in the forward NTT and have dropped a couple of the asserts. They are compiled out, but one can still be too verbose.",
      "parentUuid": "b2548037_4c221d9d",
      "range": {
        "startLine": 239,
        "startChar": 55,
        "endLine": 239,
        "endChar": 76
      },
      "revId": "1f603458ac5ac59ca85e960456625b95b97f8b86",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fb6cc0a2_9bc0144f",
        "filename": "crypto/mldsa/mldsa.c",
        "patchSetId": 8
      },
      "lineNbr": 239,
      "author": {
        "id": 17331
      },
      "writtenOn": "2024-08-20T11:16:52Z",
      "side": 1,
      "message": "\u003e The forward NTT reduces the product of two already reduced values, which is straightforwardly OK. Montgomery reduction always has q \u003c R \u003d\u003e qq \u003c qR because otherwise it\u0027s kinda pointless.\n\u003e\n\u003e The reverse NTT reduces the product of a q-bounded value and a 2q-bounded value. This is not straightforwardly OK. It not always true that 2q \u003c R in Montgomery reduction. It just is true here.\n\nAgreed",
      "parentUuid": "7513aabc_f20221fd",
      "range": {
        "startLine": 239,
        "startChar": 55,
        "endLine": 239,
        "endChar": 76
      },
      "revId": "1f603458ac5ac59ca85e960456625b95b97f8b86",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fa62ab9d_cec5a5b2",
        "filename": "crypto/mldsa/mldsa.c",
        "patchSetId": 8
      },
      "lineNbr": 326,
      "author": {
        "id": 5415
      },
      "writtenOn": "2024-08-15T23:22:10Z",
      "side": 1,
      "message": "Leaving a note for myself: the spec has this return (signed) integers, but we return negative numbers as positive representatives mod q. I assume this is because we\u0027ll ultimately want everything mod q anyway, but leaving a note so I remember to check on this.",
      "revId": "1f603458ac5ac59ca85e960456625b95b97f8b86",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "02a94f00_b73df6af",
        "filename": "crypto/mldsa/mldsa.c",
        "patchSetId": 8
      },
      "lineNbr": 340,
      "author": {
        "id": 5415
      },
      "writtenOn": "2024-08-15T23:22:10Z",
      "side": 1,
      "message": "May as well write it as an assert I suppose.\n```suggestion\n  // Pre-condition: 0 \u003c\u003d r1 \u003c\u003d 2^10 - 1\n  assert(r1 \u003c (1 \u003c\u003c 10));\n```",
      "revId": "1f603458ac5ac59ca85e960456625b95b97f8b86",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5b5d69cb_677d9f03",
        "filename": "crypto/mldsa/mldsa.c",
        "patchSetId": 8
      },
      "lineNbr": 340,
      "author": {
        "id": 17331
      },
      "writtenOn": "2024-08-16T08:04:19Z",
      "side": 1,
      "message": "IMO it\u0027s not _that_ hard to prove that this is true at the call site (and the spec does or assume such proof). But there is another (redundant) assert for the post-condition, so up to you.",
      "parentUuid": "02a94f00_b73df6af",
      "revId": "1f603458ac5ac59ca85e960456625b95b97f8b86",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "456340af_13dee7a4",
        "filename": "crypto/mldsa/mldsa.c",
        "patchSetId": 8
      },
      "lineNbr": 340,
      "author": {
        "id": 5415
      },
      "writtenOn": "2024-08-16T12:45:16Z",
      "side": 1,
      "message": "The postcondition assert does not require the precondition assert if `r1` had high bits set.",
      "parentUuid": "5b5d69cb_677d9f03",
      "revId": "1f603458ac5ac59ca85e960456625b95b97f8b86",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "baa71d1c_855dc86f",
        "filename": "crypto/mldsa/mldsa.c",
        "patchSetId": 8
      },
      "lineNbr": 340,
      "author": {
        "id": 5415
      },
      "writtenOn": "2024-08-16T12:46:42Z",
      "side": 1,
      "message": "s/does not require/does not imply/",
      "parentUuid": "456340af_13dee7a4",
      "revId": "1f603458ac5ac59ca85e960456625b95b97f8b86",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "96b6a560_d6867ead",
        "filename": "crypto/mldsa/mldsa.c",
        "patchSetId": 8
      },
      "lineNbr": 340,
      "author": {
        "id": 17331
      },
      "writtenOn": "2024-08-16T12:59:19Z",
      "side": 1,
      "message": "Yes, here it\u0027s not hard to prove that the pre-condition implies the post-condition (the 2 comments literally provide the proof). Of course not the other way around.",
      "parentUuid": "baa71d1c_855dc86f",
      "revId": "1f603458ac5ac59ca85e960456625b95b97f8b86",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f0d87ce9_9627123a",
        "filename": "crypto/mldsa/mldsa.c",
        "patchSetId": 8
      },
      "lineNbr": 340,
      "author": {
        "id": 5005
      },
      "writtenOn": "2024-08-16T18:49:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "96b6a560_d6867ead",
      "revId": "1f603458ac5ac59ca85e960456625b95b97f8b86",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9769e462_e4038d99",
        "filename": "crypto/mldsa/mldsa.c",
        "patchSetId": 8
      },
      "lineNbr": 347,
      "author": {
        "id": 5415
      },
      "writtenOn": "2024-08-15T23:22:10Z",
      "side": 1,
      "message": "I couldn\u0027t see how all this did the same thing as the FIPS 204 code, so I just exhaustively compared, and it it checks out:\n\n```\nq \u003d 8380417\nhalf_prime \u003d (q-1) // 2\ngamma2 \u003d (q-1) // 32\n\ndef mod_pm(a, b):\n  a %\u003d b\n  if a \u003e b/2:\n    a -\u003d b\n  return a\n\ndef ref(r):\n  r0 \u003d mod_pm(r, 2 * gamma2)\n  if r - r0 \u003d\u003d q - 1:\n    r1 \u003d 0\n    r0 -\u003d 1\n  else:\n    r1 \u003d (r - r0) // (2 * gamma2)\n  return r1, r0\n\ndef impl(r):\n  r1 \u003d (r + 127) \u003e\u003e 7\n  r1 \u003d (r1 * 1025 + (1 \u003c\u003c 21)) \u003e\u003e 22\n  r1 \u0026\u003d 15\n\n  r0 \u003d r\n  r0 -\u003d r1 * 2 * gamma2\n  r0 -\u003d ((half_prime - r0) \u003e\u003e 31) \u0026 q\n  return r1, r0\n\nfor r in range(q):\n  if ref(r) !\u003d impl(r):\n    raise ValueError(f\"{r}, {ref(r)}, {impl(r)}\")\n    \n# Traceback (most recent call last):\n#   File \"/tmp/foo.py\", line 32, in \u003cmodule\u003e\n#     raise ValueError(f\"{r}, {ref(r)}, {impl(r)}\")\n# ValueError: 261889, (0, 261889), (1, -1833215)\n```",
      "revId": "1f603458ac5ac59ca85e960456625b95b97f8b86",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "41853e9b_8f42aa9f",
        "filename": "crypto/mldsa/mldsa.c",
        "patchSetId": 8
      },
      "lineNbr": 386,
      "author": {
        "id": 5415
      },
      "writtenOn": "2024-08-15T23:22:10Z",
      "side": 1,
      "message": "This isn\u0027t quite algorithm 39, since algorithm 39 takes slightly different inputs.",
      "revId": "1f603458ac5ac59ca85e960456625b95b97f8b86",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e2810757_9c9a5b89",
        "filename": "crypto/mldsa/mldsa.c",
        "patchSetId": 8
      },
      "lineNbr": 386,
      "author": {
        "id": 17331
      },
      "writtenOn": "2024-08-16T08:04:19Z",
      "side": 1,
      "message": "Correct. In the spec, this is called as: `MakeHint(-ct0, w - cs2 + ct0)`, where:\n\n```\ndef MakeHint(z, r):\n    r1 \u003d HighBits(r)\n    v1 \u003d HighBits(r + z)\n    r1 !\u003d v1\n```\n\nThis means that `r \u003d w - cs2 + ct0` and `r + z \u003d w - cs2`, so it makes more sense to me to have a function with parameters `ct0, cs2, w` to avoid one addition (maybe the `(z, r)` makes the most sense from a mathematical perspective, but from an implementation perspective it doesn\u0027t).\n\n---\n\nIn the spec, 3 additions/subtractions:\n```\ntmp :\u003d w - cs2\nr :\u003d tmp + ct0\nr_plus_z :\u003d r + z\n```\n\nWith this implementation, 2 additions/subtractions:\n```\nr_plus_z :\u003d w - cs2\nr :\u003d r_plus_z + ct0\n```",
      "parentUuid": "41853e9b_8f42aa9f",
      "revId": "1f603458ac5ac59ca85e960456625b95b97f8b86",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c480936b_229fceec",
        "filename": "crypto/mldsa/mldsa.c",
        "patchSetId": 8
      },
      "lineNbr": 386,
      "author": {
        "id": 5415
      },
      "writtenOn": "2024-08-16T12:45:16Z",
      "side": 1,
      "message": "I\u0027m not disagreeing with the code. The request is simply that if you comment that a function is some algorithm and it actually isn\u0027t, the comment should explain the divergence.",
      "parentUuid": "e2810757_9c9a5b89",
      "revId": "1f603458ac5ac59ca85e960456625b95b97f8b86",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2e42828b_9a226028",
        "filename": "crypto/mldsa/mldsa.c",
        "patchSetId": 8
      },
      "lineNbr": 386,
      "author": {
        "id": 5005
      },
      "writtenOn": "2024-08-16T18:49:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c480936b_229fceec",
      "revId": "1f603458ac5ac59ca85e960456625b95b97f8b86",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "75c3c57f_5e5f59b6",
        "filename": "crypto/mldsa/mldsa.c",
        "patchSetId": 8
      },
      "lineNbr": 390,
      "author": {
        "id": 5415
      },
      "writtenOn": "2024-08-15T23:22:10Z",
      "side": 1,
      "message": "Looking at the caller, this actually needs to be constant-time, right? I guess saving `!\u003d` to a variable tends to be branchless.",
      "range": {
        "startLine": 390,
        "startChar": 22,
        "endLine": 390,
        "endChar": 24
      },
      "revId": "1f603458ac5ac59ca85e960456625b95b97f8b86",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "19199810_e1b684f0",
        "filename": "crypto/mldsa/mldsa.c",
        "patchSetId": 8
      },
      "lineNbr": 393,
      "author": {
        "id": 5415
      },
      "writtenOn": "2024-08-15T23:22:10Z",
      "side": 1,
      "message": "Maybe worth a comment somewhere here that m is 16, since it was otherwise not obvious how it related to the FIPS formulation.",
      "revId": "1f603458ac5ac59ca85e960456625b95b97f8b86",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "340b88c0_5f9442ad",
        "filename": "crypto/mldsa/mldsa.c",
        "patchSetId": 8
      },
      "lineNbr": 393,
      "author": {
        "id": 5005
      },
      "writtenOn": "2024-08-16T18:49:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "19199810_e1b684f0",
      "revId": "1f603458ac5ac59ca85e960456625b95b97f8b86",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "25c4da82_5b272b89",
        "filename": "crypto/mldsa/mldsa.c",
        "patchSetId": 8
      },
      "lineNbr": 540,
      "author": {
        "id": 5415
      },
      "writtenOn": "2024-08-15T23:22:10Z",
      "side": 1,
      "message": "Might be worth a comment that bits is bitlen b in the NIST document, and not b itself.",
      "revId": "1f603458ac5ac59ca85e960456625b95b97f8b86",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "02e02c40_27209cc0",
        "filename": "crypto/mldsa/mldsa.c",
        "patchSetId": 8
      },
      "lineNbr": 540,
      "author": {
        "id": 5005
      },
      "writtenOn": "2024-08-16T18:49:11Z",
      "side": 1,
      "message": "Or just rename the variable. Done.",
      "parentUuid": "25c4da82_5b272b89",
      "revId": "1f603458ac5ac59ca85e960456625b95b97f8b86",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7f911ee8_f8831313",
        "filename": "crypto/mldsa/mldsa.c",
        "patchSetId": 8
      },
      "lineNbr": 548,
      "author": {
        "id": 5415
      },
      "writtenOn": "2024-08-15T23:22:10Z",
      "side": 1,
      "message": "Should we assert that element is within bounds?",
      "revId": "1f603458ac5ac59ca85e960456625b95b97f8b86",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dce3d6f1_807f55f8",
        "filename": "crypto/mldsa/mldsa.c",
        "patchSetId": 8
      },
      "lineNbr": 548,
      "author": {
        "id": 17331
      },
      "writtenOn": "2024-08-16T08:04:19Z",
      "side": 1,
      "message": "Seems a bit at odds with specializing the functions for performance reasons? IMO, it\u0027s not _that_ hard to prove that each input is within bounds of its number of bits (and the spec does or assumes such proofs).",
      "parentUuid": "7f911ee8_f8831313",
      "revId": "1f603458ac5ac59ca85e960456625b95b97f8b86",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e4a24d0b_144f4005",
        "filename": "crypto/mldsa/mldsa.c",
        "patchSetId": 8
      },
      "lineNbr": 548,
      "author": {
        "id": 5415
      },
      "writtenOn": "2024-08-16T12:45:16Z",
      "side": 1,
      "message": "Why are asserts at odds with performance? Keep in mind that C `assert`s are not compiled in release builds.",
      "parentUuid": "dce3d6f1_807f55f8",
      "revId": "1f603458ac5ac59ca85e960456625b95b97f8b86",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4f130303_007b1e1e",
        "filename": "crypto/mldsa/mldsa.c",
        "patchSetId": 8
      },
      "lineNbr": 548,
      "author": {
        "id": 17331
      },
      "writtenOn": "2024-08-16T12:59:19Z",
      "side": 1,
      "message": "\u003e Keep in mind that C `assert`s are not compiled in release builds.\n\nThis I didn\u0027t know, and is certainly surprising (coming from Rust where `assert!` is always on, and a separate `debug_assert!` is available for checks that need to be disabled in release mode: https://doc.rust-lang.org/std/macro.assert.html). (Although to be nit-picky, https://en.cppreference.com/w/cpp/error/assert mentions that it depends on the `NDEBUG` macro being defined, so just reading this C file isn\u0027t enough to conclude that `assert`s are not compiled in release builds.)\n\nLet\u0027s ignore my comments about performance and add `assert`s everywhere then :)",
      "parentUuid": "e4a24d0b_144f4005",
      "revId": "1f603458ac5ac59ca85e960456625b95b97f8b86",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e4e9ca64_40e6261f",
        "filename": "crypto/mldsa/mldsa.c",
        "patchSetId": 8
      },
      "lineNbr": 548,
      "author": {
        "id": 5415
      },
      "writtenOn": "2024-08-16T15:00:36Z",
      "side": 1,
      "message": "`NDEBUG` is because the C standard is independent of the particular compiler and build environment, so it doesn\u0027t talk about \"debug\" and \"release\" mode but the preprocessor defines they imply.\n\nYou\u0027re looking at one of the first, if not the first, debug vs release differentiators here. :-P",
      "parentUuid": "4f130303_007b1e1e",
      "revId": "1f603458ac5ac59ca85e960456625b95b97f8b86",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1cadfc45_d5cff3e7",
        "filename": "crypto/mldsa/mldsa.c",
        "patchSetId": 8
      },
      "lineNbr": 548,
      "author": {
        "id": 5005
      },
      "writtenOn": "2024-08-16T18:49:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e4e9ca64_40e6261f",
      "revId": "1f603458ac5ac59ca85e960456625b95b97f8b86",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "31986619_a81743a5",
        "filename": "crypto/mldsa/mldsa.c",
        "patchSetId": 8
      },
      "lineNbr": 551,
      "author": {
        "id": 5415
      },
      "writtenOn": "2024-08-15T23:22:10Z",
      "side": 1,
      "message": "My eyes kinda glazed over all these functions. I\u0027m... just going to assume they\u0027re correct.\n\nOptional: I remember a similar bitpacking function being surprisingly perf-sensitive in Kyber and worth specializing. Guessing that\u0027s not the case perf-wise here? I dunno, I see bits is only ever 4 and 10 anyway. Specializing also makes the bounds on `out` more obvious:\n\n(Completely untested.)\n```\nstatic void scalar_encode_4(uint8_t out[128], const scalar *s) {\n  // Every 2 elements lands on a byte boundary.\n  static_assert(DEGREE % 2 \u003d\u003d 0, \"DEGREE must be a multiple of 2\");\n  for (int i \u003d 0; i \u003c DEGREE / 2; i++) {\n    uint32_t a \u003d s-\u003ec[2 * i];\n    uint32_t b \u003d s-\u003ec[2 * i + 1];\n    declassify_assert(a \u003c 16);\n    declassify_assert(b \u003c 16);\n    out[i] \u003d a | (b \u003c\u003c 4);\n  }\n}\n\nstatic void scalar_encode_10(uint8_t out[320], const scalar *s) {\n  // Every 4 elements lands on a byte boundary.\n  static_assert(DEGREE % 4 \u003d\u003d 0, \"DEGREE must be a multiple of 4\");\n  for (int i \u003d 0; i \u003c DEGREE / 4; i++) {\n    uint32_t a \u003d s-\u003ec[4 * i];\n    uint32_t b \u003d s-\u003ec[4 * i + 1];\n    uint32_t c \u003d s-\u003ec[4 * i + 2];\n    uint32_t d \u003d s-\u003ec[4 * i + 3];\n    declassify_assert(a \u003c 1024);\n    declassify_assert(b \u003c 1024);\n    declassify_assert(c \u003c 1024);\n    declassify_assert(d \u003c 1024);\n    out[5 * i] \u003d (uint8_t)a;\n    out[5 * i + 1] \u003d (uint8_t)((a \u003e\u003e 8) | (b \u003c\u003c 2));\n    out[5 * i + 2] \u003d (uint8_t)((b \u003e\u003e 6) | (c \u003c\u003c 4));\n    out[5 * i + 3] \u003d (uint8_t)((c \u003e\u003e 4) | (d \u003c\u003c 6));\n    out[5 * i + 4] \u003d (uint8_t)(d \u003e\u003e 2);\n  }\n}\n```\n\nI think this is more clearer (and probably faster) than generic bitpacking.",
      "revId": "1f603458ac5ac59ca85e960456625b95b97f8b86",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "acbc8477_5f68abe4",
        "filename": "crypto/mldsa/mldsa.c",
        "patchSetId": 8
      },
      "lineNbr": 551,
      "author": {
        "id": 5005
      },
      "writtenOn": "2024-08-16T18:49:11Z",
      "side": 1,
      "message": "It gets 3% performance for verification but it\u0027s also clearer. Done.\n\nI also noticed that the signed-decode functions are infallible for 13 and 20 bits if specialized so I did that one too.\n\nBefore:\n\nDid 9207 MLDSA key generation operations in 1033071us (8912.3 ops/sec)\nDid 86000 MLDSA parse (valid) private key operations in 1006740us (85424.2 ops/sec)\nDid 1836 MLDSA sign (randomized) operations in 1006695us (1823.8 ops/sec)\nDid 139000 MLDSA parse (valid) public key operations in 1006780us (138063.9 ops/sec)\nDid 9135 MLDSA verify (valid signature) operations in 1015933us (8991.7 ops/sec)\nDid 9482 MLDSA verify (invalid signature) operations in 1056263us (8976.9 ops/sec)\n\nAfter:\n\nDid 9450 MLDSA key generation operations in 1023378us (9234.1 ops/sec)\nDid 493000 MLDSA parse (valid) private key operations in 1001206us (492406.2 ops/sec)\nDid 2205 MLDSA sign (randomized) operations in 1109876us (1986.7 ops/sec)\nDid 264000 MLDSA parse (valid) public key operations in 1001212us (263680.4 ops/sec)\nDid 10040 MLDSA verify (valid signature) operations in 1040548us (9648.8 ops/sec)\nDid 10175 MLDSA verify (invalid signature) operations in 1054923us (9645.3 ops/sec)",
      "parentUuid": "31986619_a81743a5",
      "revId": "1f603458ac5ac59ca85e960456625b95b97f8b86",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4a8159d3_2f0f40bb",
        "filename": "crypto/mldsa/mldsa.c",
        "patchSetId": 8
      },
      "lineNbr": 576,
      "author": {
        "id": 5415
      },
      "writtenOn": "2024-08-15T23:22:10Z",
      "side": 1,
      "message": "Probably worth a comment about how `bits` and `max` relate to NIST\u0027s `a` and `b`.",
      "revId": "1f603458ac5ac59ca85e960456625b95b97f8b86",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a736bc77_b9b26008",
        "filename": "crypto/mldsa/mldsa.c",
        "patchSetId": 8
      },
      "lineNbr": 576,
      "author": {
        "id": 5005
      },
      "writtenOn": "2024-08-16T18:49:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4a8159d3_2f0f40bb",
      "revId": "1f603458ac5ac59ca85e960456625b95b97f8b86",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2f73218f_84532fb0",
        "filename": "crypto/mldsa/mldsa.c",
        "patchSetId": 8
      },
      "lineNbr": 578,
      "author": {
        "id": 5415
      },
      "writtenOn": "2024-08-15T23:22:10Z",
      "side": 1,
      "message": "Optional: I suppose this has three different bit widths (4, 13, and 20) to specialize. 13 is mildly annoying because it only loops every 8. Yeah, I dunno.",
      "revId": "1f603458ac5ac59ca85e960456625b95b97f8b86",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "229f402b_aa903be6",
        "filename": "crypto/mldsa/mldsa.c",
        "patchSetId": 8
      },
      "lineNbr": 578,
      "author": {
        "id": 5005
      },
      "writtenOn": "2024-08-16T18:49:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2f73218f_84532fb0",
      "revId": "1f603458ac5ac59ca85e960456625b95b97f8b86",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0d5a38e9_81fa7c9a",
        "filename": "crypto/mldsa/mldsa.c",
        "patchSetId": 8
      },
      "lineNbr": 692,
      "author": {
        "id": 5415
      },
      "writtenOn": "2024-08-15T23:22:10Z",
      "side": 1,
      "message": "Note to self: this is how far I got on Thursday. Continue from here tomorrow. Hopefully tomorrow will be faster to get through. 😊",
      "revId": "1f603458ac5ac59ca85e960456625b95b97f8b86",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5b6869c3_29e6c6f3",
        "filename": "crypto/mldsa/mldsa.c",
        "patchSetId": 8
      },
      "lineNbr": 692,
      "author": {
        "id": 5005
      },
      "writtenOn": "2024-08-16T18:49:11Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "0d5a38e9_81fa7c9a",
      "revId": "1f603458ac5ac59ca85e960456625b95b97f8b86",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d3f9b15f_d1c76729",
        "filename": "crypto/mldsa/mldsa.c",
        "patchSetId": 8
      },
      "lineNbr": 692,
      "author": {
        "id": 5415
      },
      "writtenOn": "2024-08-16T20:03:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0d5a38e9_81fa7c9a",
      "revId": "1f603458ac5ac59ca85e960456625b95b97f8b86",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "48c04e10_eba45989",
        "filename": "crypto/mldsa/mldsa.c",
        "patchSetId": 8
      },
      "lineNbr": 755,
      "author": {
        "id": 5415
      },
      "writtenOn": "2024-08-16T20:03:53Z",
      "side": 1,
      "message": "Looks like this is just one step of ExpandMask.",
      "revId": "1f603458ac5ac59ca85e960456625b95b97f8b86",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ffe51e18_d0bc6603",
        "filename": "crypto/mldsa/mldsa.c",
        "patchSetId": 8
      },
      "lineNbr": 755,
      "author": {
        "id": 5005
      },
      "writtenOn": "2024-08-16T20:51:16Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "48c04e10_eba45989",
      "revId": "1f603458ac5ac59ca85e960456625b95b97f8b86",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6ee843f5_6a49ae1f",
        "filename": "crypto/mldsa/mldsa.c",
        "patchSetId": 8
      },
      "lineNbr": 821,
      "author": {
        "id": 5415
      },
      "writtenOn": "2024-08-16T20:03:53Z",
      "side": 1,
      "message": "```suggestion\n      derived_seed[RHO_BYTES + 1] \u003d (uint8_t)i;\n      derived_seed[RHO_BYTES] \u003d (uint8_t)j;\n```\n\n(I haven\u0027t gone back to trying to get `-Wconversion` to pass for a long while, but may as well.)",
      "range": {
        "startLine": 820,
        "startChar": 0,
        "endLine": 821,
        "endChar": 34
      },
      "revId": "1f603458ac5ac59ca85e960456625b95b97f8b86",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "772a79bf_4170d709",
        "filename": "crypto/mldsa/mldsa.c",
        "patchSetId": 8
      },
      "lineNbr": 821,
      "author": {
        "id": 5005
      },
      "writtenOn": "2024-08-16T20:51:16Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6ee843f5_6a49ae1f",
      "range": {
        "startLine": 820,
        "startChar": 0,
        "endLine": 821,
        "endChar": 34
      },
      "revId": "1f603458ac5ac59ca85e960456625b95b97f8b86",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c6b81f04_2c31e806",
        "filename": "crypto/mldsa/mldsa.c",
        "patchSetId": 8
      },
      "lineNbr": 822,
      "author": {
        "id": 5415
      },
      "writtenOn": "2024-08-16T20:03:53Z",
      "side": 1,
      "message": "(I guess this and below is where parallel Keccak would help with perf.)",
      "revId": "1f603458ac5ac59ca85e960456625b95b97f8b86",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7f0a46eb_b9ad643e",
        "filename": "crypto/mldsa/mldsa.c",
        "patchSetId": 8
      },
      "lineNbr": 822,
      "author": {
        "id": 17331
      },
      "writtenOn": "2024-08-19T09:45:07Z",
      "side": 1,
      "message": "There\u0027s definitely room for parallelization. One practical difficulty is that each instance of these rejection sampling functions may consume a different number of blocks from the Keccak state, so the code would become a bit more tangled and care must be taken that it\u0027s still correct.",
      "parentUuid": "c6b81f04_2c31e806",
      "revId": "1f603458ac5ac59ca85e960456625b95b97f8b86",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8dfc3cd1_b8a2bbd9",
        "filename": "crypto/mldsa/mldsa.c",
        "patchSetId": 8
      },
      "lineNbr": 851,
      "author": {
        "id": 5415
      },
      "writtenOn": "2024-08-16T20:03:53Z",
      "side": 1,
      "message": "Unfortunate that NIST decided to call it kappa in the caller and mu in the function. Ah well.",
      "range": {
        "startLine": 851,
        "startChar": 39,
        "endLine": 851,
        "endChar": 44
      },
      "revId": "1f603458ac5ac59ca85e960456625b95b97f8b86",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7cbef4b4_a5251c40",
        "filename": "crypto/mldsa/mldsa.c",
        "patchSetId": 8
      },
      "lineNbr": 928,
      "author": {
        "id": 5415
      },
      "writtenOn": "2024-08-16T20:03:53Z",
      "side": 1,
      "message": "```suggestion\nstatic void w1_encode(uint8_t out[128 * K], const vectork *w1) {\n```\n\nAnd then we don\u0027t need the comment",
      "revId": "1f603458ac5ac59ca85e960456625b95b97f8b86",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f4a782a4_f8467432",
        "filename": "crypto/mldsa/mldsa.c",
        "patchSetId": 8
      },
      "lineNbr": 928,
      "author": {
        "id": 5005
      },
      "writtenOn": "2024-08-16T20:51:16Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7cbef4b4_a5251c40",
      "revId": "1f603458ac5ac59ca85e960456625b95b97f8b86",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f971711f_0c67f141",
        "filename": "crypto/mldsa/mldsa.c",
        "patchSetId": 8
      },
      "lineNbr": 933,
      "author": {
        "id": 5415
      },
      "writtenOn": "2024-08-16T20:03:53Z",
      "side": 1,
      "message": "```suggestion\nstatic void hint_bit_pack(uint8_t out[OMEGA + K], const vectork *h) {\n```",
      "revId": "1f603458ac5ac59ca85e960456625b95b97f8b86",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "98c098a0_6e5b3ba3",
        "filename": "crypto/mldsa/mldsa.c",
        "patchSetId": 8
      },
      "lineNbr": 933,
      "author": {
        "id": 5005
      },
      "writtenOn": "2024-08-16T20:51:16Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f971711f_0c67f141",
      "revId": "1f603458ac5ac59ca85e960456625b95b97f8b86",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "864f9536_32ff7564",
        "filename": "crypto/mldsa/mldsa.c",
        "patchSetId": 8
      },
      "lineNbr": 939,
      "author": {
        "id": 5415
      },
      "writtenOn": "2024-08-16T20:03:53Z",
      "side": 1,
      "message": "This is kind of precarious. So, if I\u0027m understanding this correctly, this only stays in bounds because of how many non-zero values `h`. I\u0027m assuming this encoding is not performance-sensitive. It may be worth doing this as a release mode assert. Something like...\n\n\n\n```suggestion\n        // h must have at most OMEGA nonzero coefficients.\n        BSSL_CHECK(index \u003c OMEGA);\n        out[index++] \u003d j;\n```",
      "revId": "1f603458ac5ac59ca85e960456625b95b97f8b86",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1c9aca3c_675c51df",
        "filename": "crypto/mldsa/mldsa.c",
        "patchSetId": 8
      },
      "lineNbr": 939,
      "author": {
        "id": 5005
      },
      "writtenOn": "2024-08-16T20:51:16Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "864f9536_32ff7564",
      "revId": "1f603458ac5ac59ca85e960456625b95b97f8b86",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5b2c144f_79342f61",
        "filename": "crypto/mldsa/mldsa.c",
        "patchSetId": 8
      },
      "lineNbr": 939,
      "author": {
        "id": 17331
      },
      "writtenOn": "2024-08-19T09:45:07Z",
      "side": 1,
      "message": "That\u0027s literally what the check at line 1393 of this patchset ensures. Given that `hint_bit_pack()` and its unique caller `mldsa_marshal_signature()` are both private to this file, there\u0027s no way this can be called with an invalid input.",
      "parentUuid": "1c9aca3c_675c51df",
      "revId": "1f603458ac5ac59ca85e960456625b95b97f8b86",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2a0f1a78_49af2233",
        "filename": "crypto/mldsa/mldsa.c",
        "patchSetId": 8
      },
      "lineNbr": 939,
      "author": {
        "id": 5415
      },
      "writtenOn": "2024-08-19T17:49:01Z",
      "side": 1,
      "message": "For something as critical as bounds-safety, I think it\u0027s important for things to be more locally obvious than that.\n\n(Were this written in a safe language, we\u0027d have gotten this check automatically, and I doubt this access would have warranted a use of `get_unchecked_mut` in Rust.)",
      "parentUuid": "5b2c144f_79342f61",
      "revId": "1f603458ac5ac59ca85e960456625b95b97f8b86",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "13645465_4ed36d78",
        "filename": "crypto/mldsa/mldsa.c",
        "patchSetId": 8
      },
      "lineNbr": 939,
      "author": {
        "id": 5005
      },
      "writtenOn": "2024-08-19T18:29:14Z",
      "side": 1,
      "message": "Give the distance between the checks, and that we would corrupt memory if violated, I think this check is reasonable. The branch predictor will quickly learn to skip it.",
      "parentUuid": "5b2c144f_79342f61",
      "revId": "1f603458ac5ac59ca85e960456625b95b97f8b86",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f6a58e0f_10cc264a",
        "filename": "crypto/mldsa/mldsa.c",
        "patchSetId": 8
      },
      "lineNbr": 947,
      "author": {
        "id": 5415
      },
      "writtenOn": "2024-08-16T20:03:53Z",
      "side": 1,
      "message": "```suggestion\nstatic int hint_bit_unpack(vectork *h, const uint8_t in[OMEGA + K]) {\n```",
      "range": {
        "startLine": 947,
        "startChar": 53,
        "endLine": 947,
        "endChar": 56
      },
      "revId": "1f603458ac5ac59ca85e960456625b95b97f8b86",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0ccfce83_febc92f4",
        "filename": "crypto/mldsa/mldsa.c",
        "patchSetId": 8
      },
      "lineNbr": 947,
      "author": {
        "id": 5005
      },
      "writtenOn": "2024-08-16T20:51:16Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f6a58e0f_10cc264a",
      "range": {
        "startLine": 947,
        "startChar": 53,
        "endLine": 947,
        "endChar": 56
      },
      "revId": "1f603458ac5ac59ca85e960456625b95b97f8b86",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b55edb88_3a4cb83c",
        "filename": "crypto/mldsa/mldsa.c",
        "patchSetId": 8
      },
      "lineNbr": 963,
      "author": {
        "id": 5415
      },
      "writtenOn": "2024-08-16T20:03:53Z",
      "side": 1,
      "message": "```suggestion\n      static_assert(DEGREE \u003d\u003d 256,\n                    \"DEGREE must be 256 for this write to be in bounds\");\n      h-\u003ev[i].c[byte] \u003d 1;\n```",
      "revId": "1f603458ac5ac59ca85e960456625b95b97f8b86",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "75ff3321_63d24316",
        "filename": "crypto/mldsa/mldsa.c",
        "patchSetId": 8
      },
      "lineNbr": 963,
      "author": {
        "id": 5005
      },
      "writtenOn": "2024-08-16T20:51:16Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b55edb88_3a4cb83c",
      "revId": "1f603458ac5ac59ca85e960456625b95b97f8b86",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4e46d911_3d7cad8e",
        "filename": "crypto/mldsa/mldsa.c",
        "patchSetId": 8
      },
      "lineNbr": 1154,
      "author": {
        "id": 5415
      },
      "writtenOn": "2024-08-16T20:03:53Z",
      "side": 1,
      "message": "Do we expect folks using `MLDSA_private_key_from_seed` to end up needing the public key? If so, the combo of this and `MLDSA_public_from_private` is more work than just not discarding the value.",
      "revId": "1f603458ac5ac59ca85e960456625b95b97f8b86",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "807e8f79_2b5b2c79",
        "filename": "crypto/mldsa/mldsa.c",
        "patchSetId": 8
      },
      "lineNbr": 1154,
      "author": {
        "id": 5005
      },
      "writtenOn": "2024-08-16T20:51:16Z",
      "side": 1,
      "message": "I think the major motive for using `from_seed` is to avoid storing 4KB private keys. (I mean, that\u0027s just a pain to copy-paste so I kinda hope the seed is used quite a lot?) But I think this function is just for people loading a private key from a seed?",
      "parentUuid": "4e46d911_3d7cad8e",
      "revId": "1f603458ac5ac59ca85e960456625b95b97f8b86",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "31304c6b_8dde7b87",
        "filename": "crypto/mldsa/mldsa.c",
        "patchSetId": 8
      },
      "lineNbr": 1154,
      "author": {
        "id": 5415
      },
      "writtenOn": "2024-08-19T17:49:01Z",
      "side": 1,
      "message": "Yeah, I guess if you\u0027re loading a private key, you\u0027re (probably?) not planning to just hand the public key over to someone because you\u0027ve already done that.\n\n*shrug*",
      "parentUuid": "807e8f79_2b5b2c79",
      "revId": "1f603458ac5ac59ca85e960456625b95b97f8b86",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "96d0d3e2_a8a3483e",
        "filename": "crypto/mldsa/mldsa.c",
        "patchSetId": 8
      },
      "lineNbr": 1154,
      "author": {
        "id": 5005
      },
      "writtenOn": "2024-08-19T18:29:14Z",
      "side": 1,
      "message": "Yea, I think so. If I\u0027m wrong, and generating both from a seed becomes an important operation, there can always be `MLDSA65_public_and_private_key_from_seed`.",
      "parentUuid": "31304c6b_8dde7b87",
      "revId": "1f603458ac5ac59ca85e960456625b95b97f8b86",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eadb7f60_b85b6827",
        "filename": "crypto/mldsa/mldsa.c",
        "patchSetId": 8
      },
      "lineNbr": 1216,
      "author": {
        "id": 5415
      },
      "writtenOn": "2024-08-16T20:03:53Z",
      "side": 1,
      "message": "May as well `assert(CBB_len(\u0026cbb) \u003d\u003d MLDSA_PUBLIC_KEY_BYTES);` to make sure we filled the whole thing.",
      "revId": "1f603458ac5ac59ca85e960456625b95b97f8b86",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1feaf474_721c48d5",
        "filename": "crypto/mldsa/mldsa.c",
        "patchSetId": 8
      },
      "lineNbr": 1216,
      "author": {
        "id": 5005
      },
      "writtenOn": "2024-08-16T20:51:16Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "eadb7f60_b85b6827",
      "revId": "1f603458ac5ac59ca85e960456625b95b97f8b86",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "77c0cc70_f64c2f41",
        "filename": "crypto/mldsa/mldsa.c",
        "patchSetId": 8
      },
      "lineNbr": 1333,
      "author": {
        "id": 5415
      },
      "writtenOn": "2024-08-16T20:03:53Z",
      "side": 1,
      "message": "Presumably this is impossible, but this is a little fun. So `vectorl_expand_mask` has an `assert` that `kappa + L` is 16-bit, needed for the encodings to avoid dropping bits...\n\nBut there isn\u0027t actually anything ensuring that assertion is true. (Though the probability of this happening is negligible.)\n\nLooking at the spec, they don\u0027t actually have a precondition on ExpandMask or IntegerToBytes. The functions take any integer and silently truncate. So I think the spec formulation makes this well-defined, but potentially diverging.\n\nI suppose tripping that assertion doesn\u0027t actually do anything. It just seems a little weird to have an assertion that is only probabilistically unreachable. *shrug* (Could leave it alone, take the assert out, leave some comments, add a limit per appendix C, or whatever. Don\u0027t feel strongly, just found it odd.)",
      "revId": "1f603458ac5ac59ca85e960456625b95b97f8b86",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a396c44b_75028d96",
        "filename": "crypto/mldsa/mldsa.c",
        "patchSetId": 8
      },
      "lineNbr": 1333,
      "author": {
        "id": 17331
      },
      "writtenOn": "2024-08-19T09:45:07Z",
      "side": 1,
      "message": "\u003e It just seems a little weird to have an assertion that is only probabilistically unreachable.\n\nIsn\u0027t it quite common in cryptography that if something has probability less than `2^-128` (or `2^-256` or whatever your tolerance is), then it\u0027s as if it never happens? Because if it happens, it\u0027s as if an attacker managed to brute-force your private key and that\u0027s game over.\n\nMore concretely, unfortunately the spec doesn\u0027t spell out the probability of each loop iteration failing. I could easily reach around 50 iterations (see the wycheproof test file) by generating 10\u0027000 signatures, but for this to overflow you\u0027d need 65\u0027536/L \u003d 13\u0027107 iterations.\n\nWith a bit of napkin math (don\u0027t quote me on this), if the probability to exceed 100 iterations (rounded up from 50) is less than 1/10000 (which is less than `2^-13`), the probability to exceed 1000 iterations should be less than `2^-130` and the probability to exceed 10000 iterations should be less than `2^-1300`.",
      "parentUuid": "77c0cc70_f64c2f41",
      "revId": "1f603458ac5ac59ca85e960456625b95b97f8b86",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8fdf570f_aa3cd46b",
        "filename": "crypto/mldsa/mldsa.c",
        "patchSetId": 8
      },
      "lineNbr": 1333,
      "author": {
        "id": 5415
      },
      "writtenOn": "2024-08-19T17:49:01Z",
      "side": 1,
      "message": "It\u0027s game over in terms of cryptographic properties, but that\u0027s not the same as integrity of the execution environment.\n\nWe also have to account for things like private keys that fail invariants. Do the bounds hold for all possible private key byte strings, or just the ones that were the output of keygen. (From the chat, it sounded like this was probably true but uncertain?) Even though attack control of the private key obviously invalidates all cryptographic properties, so we don\u0027t actually care if the results are meaningful, but we *do* care that the function stays within DoS and other security bounds in all such cases.\n\nThis is because, e.g., a hosting provider may provide a service where the (untrusted) customer provides a private key for the hosting provider to evaluate. Ideally the key would never leave the hosting provider and be delegated, but alas that\u0027s not universal. There are also examples (e.g. WebCrypto) where a more trusted execution environment (browser code) runs cryptographic operations on behalf of untrusted code (website code). There, the output is unimportant, but the untrusted code cannot compromise the integrity of the execution environment.\n\nAt the very least, if we leave it as is, I think we should have a comment here because this isn\u0027t obvious. But the invalid private key thing makes me a bit uncomfortable. Picking up NIST\u0027s limits from Appendix C might not be the worst idea?\n\n(Side-effect-less infinite loops are also UB from a language perspective, but unlikely the compiler would do anything with that one.)",
      "parentUuid": "a396c44b_75028d96",
      "revId": "1f603458ac5ac59ca85e960456625b95b97f8b86",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d1f10c28_f7383bb2",
        "filename": "crypto/mldsa/mldsa.c",
        "patchSetId": 8
      },
      "lineNbr": 1333,
      "author": {
        "id": 5005
      },
      "writtenOn": "2024-08-19T18:29:14Z",
      "side": 1,
      "message": "I\u0027m tempted to leave it as is so have added a comment to that effect.",
      "parentUuid": "a396c44b_75028d96",
      "revId": "1f603458ac5ac59ca85e960456625b95b97f8b86",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f2f1f9df_f628441e",
        "filename": "crypto/mldsa/mldsa.c",
        "patchSetId": 8
      },
      "lineNbr": 1509,
      "author": {
        "id": 5415
      },
      "writtenOn": "2024-08-16T20:03:53Z",
      "side": 1,
      "message": "Optional: I think multiplication works just fine in-place, so we could avoid `t1_ntt` with:\n\n```suggestion\n  vectork_scale_power2_round(\u0026values-\u003ect1_ntt, \u0026pub-\u003et1);\n  vectork_ntt(\u0026values-\u003ect1_ntt);\n  vectork_mult_scalar(\u0026values-\u003ect1_ntt, \u0026values-\u003ect1_ntt, \u0026c_ntt);\n```",
      "range": {
        "startLine": 1506,
        "startChar": 0,
        "endLine": 1509,
        "endChar": 65
      },
      "revId": "1f603458ac5ac59ca85e960456625b95b97f8b86",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "906bf32e_5e733103",
        "filename": "crypto/mldsa/mldsa.c",
        "patchSetId": 8
      },
      "lineNbr": 1509,
      "author": {
        "id": 5005
      },
      "writtenOn": "2024-08-16T20:51:16Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f2f1f9df_f628441e",
      "range": {
        "startLine": 1506,
        "startChar": 0,
        "endLine": 1509,
        "endChar": 65
      },
      "revId": "1f603458ac5ac59ca85e960456625b95b97f8b86",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "646cfdcf_24c11b3a",
        "filename": "crypto/mldsa/mldsa.c",
        "patchSetId": 8
      },
      "lineNbr": 1516,
      "author": {
        "id": 5415
      },
      "writtenOn": "2024-08-16T20:03:53Z",
      "side": 1,
      "message": "Optional: Likewise, `w_approx` and `w1` can be pretty easily folded together.\n\n(One of `az_ntt` or `ct1_ntt` could also be folded in, but that might be too hard to read.)",
      "revId": "1f603458ac5ac59ca85e960456625b95b97f8b86",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a1090b5d_7d5ab9d8",
        "filename": "crypto/mldsa/mldsa.c",
        "patchSetId": 8
      },
      "lineNbr": 1516,
      "author": {
        "id": 5005
      },
      "writtenOn": "2024-08-16T20:51:16Z",
      "side": 1,
      "message": "Done. (Folded az_ntt and w1, but kept a variable called `w1` for clarity.)",
      "parentUuid": "646cfdcf_24c11b3a",
      "revId": "1f603458ac5ac59ca85e960456625b95b97f8b86",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "090935ef_304d3e96",
        "filename": "crypto/mldsa/mldsa.c",
        "patchSetId": 8
      },
      "lineNbr": 1526,
      "author": {
        "id": 5415
      },
      "writtenOn": "2024-08-16T20:03:53Z",
      "side": 1,
      "message": "Where\u0027s this check come from? I\u0027m not seeing it in the NIST document.\n\n(Doesn\u0027t the hint decode process guarantee it already?)",
      "range": {
        "startLine": 1526,
        "startChar": 32,
        "endLine": 1526,
        "endChar": 50
      },
      "revId": "1f603458ac5ac59ca85e960456625b95b97f8b86",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8c01c163_b3ee1ae5",
        "filename": "crypto/mldsa/mldsa.c",
        "patchSetId": 8
      },
      "lineNbr": 1526,
      "author": {
        "id": 5005
      },
      "writtenOn": "2024-08-16T20:51:16Z",
      "side": 1,
      "message": "Good point. Dropped, although I\u0027ll flag for Guillaume.",
      "parentUuid": "090935ef_304d3e96",
      "range": {
        "startLine": 1526,
        "startChar": 32,
        "endLine": 1526,
        "endChar": 50
      },
      "revId": "1f603458ac5ac59ca85e960456625b95b97f8b86",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6ea7d5eb_f932e64c",
        "filename": "crypto/mldsa/mldsa.c",
        "patchSetId": 8
      },
      "lineNbr": 1526,
      "author": {
        "id": 17331
      },
      "writtenOn": "2024-08-19T08:25:23Z",
      "side": 1,
      "message": "Yes, they removed it between the draft and the final standard, but forgot to flag it in the Appendix D.3 changelog. This check was indeed redundant because by construction the value `h` cannot contain more than `OMEGA` ones (due to how the signature serialization format is defined).",
      "parentUuid": "8c01c163_b3ee1ae5",
      "range": {
        "startLine": 1526,
        "startChar": 32,
        "endLine": 1526,
        "endChar": 50
      },
      "revId": "1f603458ac5ac59ca85e960456625b95b97f8b86",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cfa7917e_5deb7233",
        "filename": "crypto/mldsa/mldsa_test.cc",
        "patchSetId": 8
      },
      "lineNbr": 245,
      "author": {
        "id": 5415
      },
      "writtenOn": "2024-08-16T20:03:53Z",
      "side": 1,
      "message": "Good job, NIST.\n\nIs it fixed now? This claims it is.\nhttps://groups.google.com/a/list.nist.gov/g/pqc-forum/c/s_Wez9FanHw/m/4alRqqfSCgAJ",
      "revId": "1f603458ac5ac59ca85e960456625b95b97f8b86",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7e7468f3_f8edce53",
        "filename": "crypto/mldsa/mldsa_test.cc",
        "patchSetId": 8
      },
      "lineNbr": 245,
      "author": {
        "id": 5005
      },
      "writtenOn": "2024-08-16T20:51:16Z",
      "side": 1,
      "message": "I\u0027ll try again now.",
      "parentUuid": "cfa7917e_5deb7233",
      "revId": "1f603458ac5ac59ca85e960456625b95b97f8b86",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9f071cd2_398d1c0a",
        "filename": "crypto/mldsa/mldsa_test.cc",
        "patchSetId": 8
      },
      "lineNbr": 245,
      "author": {
        "id": 5005
      },
      "writtenOn": "2024-08-19T18:29:14Z",
      "side": 1,
      "message": "The NIST server was down on Friday and is still unresponsive today. We\u0027ll carry on without it.",
      "parentUuid": "7e7468f3_f8edce53",
      "revId": "1f603458ac5ac59ca85e960456625b95b97f8b86",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8370bfe7_b422c4e0",
        "filename": "include/openssl/mldsa.h",
        "patchSetId": 8
      },
      "lineNbr": 31,
      "author": {
        "id": 5415
      },
      "writtenOn": "2024-08-15T23:22:10Z",
      "side": 1,
      "message": "Should we prefix all these with `MLDSA65` instead of `MLDSA`? It\u0027ll be annoying to rename if we ever add one of the others.",
      "range": {
        "startLine": 31,
        "startChar": 3,
        "endLine": 31,
        "endChar": 8
      },
      "revId": "1f603458ac5ac59ca85e960456625b95b97f8b86",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "273bcd28_c83444cb",
        "filename": "include/openssl/mldsa.h",
        "patchSetId": 8
      },
      "lineNbr": 31,
      "author": {
        "id": 5005
      },
      "writtenOn": "2024-08-16T18:49:11Z",
      "side": 1,
      "message": "Up for discussion, but for ML-KEM I\u0027m keeping ML-KEM-768 as just `MLKEM_foo` because that\u0027s the standard one and people using something else should notice that it\u0027s a little odder. I\u0027m applying similar reasoning here.",
      "parentUuid": "8370bfe7_b422c4e0",
      "range": {
        "startLine": 31,
        "startChar": 3,
        "endLine": 31,
        "endChar": 8
      },
      "revId": "1f603458ac5ac59ca85e960456625b95b97f8b86",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0b0f8ee7_0e3ed03a",
        "filename": "include/openssl/mldsa.h",
        "patchSetId": 8
      },
      "lineNbr": 31,
      "author": {
        "id": 17331
      },
      "writtenOn": "2024-08-19T09:45:07Z",
      "side": 1,
      "message": "Up to you, but \"that\u0027s the standard one\" depends on perspective, all 3 variants are standardized by NIST. Maybe \"that\u0027s the preferred one\", but again, preferred by whom? It might be good to qualify.",
      "parentUuid": "273bcd28_c83444cb",
      "range": {
        "startLine": 31,
        "startChar": 3,
        "endLine": 31,
        "endChar": 8
      },
      "revId": "1f603458ac5ac59ca85e960456625b95b97f8b86",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f891f3f3_a9b73aac",
        "filename": "include/openssl/mldsa.h",
        "patchSetId": 8
      },
      "lineNbr": 31,
      "author": {
        "id": 14196
      },
      "writtenOn": "2024-08-19T16:04:38Z",
      "side": 1,
      "message": "I assume we are probably going to be forced into adding at least one of the others at some point, given that I\u0027d rather avoid a future rename and have it consistent in the future so some version of something like  MLDSA65 would be better imo. (I am not picky about the exact colour of that bikeshed)",
      "parentUuid": "0b0f8ee7_0e3ed03a",
      "range": {
        "startLine": 31,
        "startChar": 3,
        "endLine": 31,
        "endChar": 8
      },
      "revId": "1f603458ac5ac59ca85e960456625b95b97f8b86",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c88f70e6_045f961e",
        "filename": "include/openssl/mldsa.h",
        "patchSetId": 8
      },
      "lineNbr": 31,
      "author": {
        "id": 5415
      },
      "writtenOn": "2024-08-19T17:49:01Z",
      "side": 1,
      "message": "\u003e preferred by whom? It might be good to qualify.\n\n(We assert preferences in BoringSSL. That doesn\u0027t need to be qualified. Question is just whether the API names are the way to do it.)",
      "parentUuid": "f891f3f3_a9b73aac",
      "range": {
        "startLine": 31,
        "startChar": 3,
        "endLine": 31,
        "endChar": 8
      },
      "revId": "1f603458ac5ac59ca85e960456625b95b97f8b86",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3137fd38_742fc70d",
        "filename": "include/openssl/mldsa.h",
        "patchSetId": 8
      },
      "lineNbr": 31,
      "author": {
        "id": 5005
      },
      "writtenOn": "2024-08-19T18:29:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f891f3f3_a9b73aac",
      "range": {
        "startLine": 31,
        "startChar": 3,
        "endLine": 31,
        "endChar": 8
      },
      "revId": "1f603458ac5ac59ca85e960456625b95b97f8b86",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "094c28e0_3ed394b2",
        "filename": "include/openssl/mldsa.h",
        "patchSetId": 8
      },
      "lineNbr": 67,
      "author": {
        "id": 5415
      },
      "writtenOn": "2024-08-15T23:22:10Z",
      "side": 1,
      "message": "s/Returns/It returns/ across the whole file",
      "range": {
        "startLine": 67,
        "startChar": 8,
        "endLine": 67,
        "endChar": 15
      },
      "revId": "1f603458ac5ac59ca85e960456625b95b97f8b86",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7f43d8d6_fdc1e7b1",
        "filename": "include/openssl/mldsa.h",
        "patchSetId": 8
      },
      "lineNbr": 67,
      "author": {
        "id": 5005
      },
      "writtenOn": "2024-08-16T18:49:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "094c28e0_3ed394b2",
      "range": {
        "startLine": 67,
        "startChar": 8,
        "endLine": 67,
        "endChar": 15
      },
      "revId": "1f603458ac5ac59ca85e960456625b95b97f8b86",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "84b0599b_f0a48bb5",
        "filename": "include/openssl/mldsa.h",
        "patchSetId": 8
      },
      "lineNbr": 92,
      "author": {
        "id": 5415
      },
      "writtenOn": "2024-08-15T23:22:10Z",
      "side": 1,
      "message": "Perhaps \"use an empty context\". Otherwise it reads as if empty and omitted context are different things. Mostly this stuck out to me because occasionally APIs are gross and believe NULL,0 and non-NULL,0 are different things.",
      "range": {
        "startLine": 92,
        "startChar": 72,
        "endLine": 92,
        "endChar": 78
      },
      "revId": "1f603458ac5ac59ca85e960456625b95b97f8b86",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0feab92a_078dc43d",
        "filename": "include/openssl/mldsa.h",
        "patchSetId": 8
      },
      "lineNbr": 92,
      "author": {
        "id": 5005
      },
      "writtenOn": "2024-08-16T18:49:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "84b0599b_f0a48bb5",
      "range": {
        "startLine": 92,
        "startChar": 72,
        "endLine": 92,
        "endChar": 78
      },
      "revId": "1f603458ac5ac59ca85e960456625b95b97f8b86",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e3b87ffe_ba5b5988",
        "filename": "third_party/wycheproof_testvectors/mldsa_65_standard_sign_test.json",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 5415
      },
      "writtenOn": "2024-08-16T20:03:53Z",
      "side": 1,
      "message": "I don\u0027t actually see these in the Wycheproof repo. :-/\n\nI... suspect we can\u0027t land this (or at least import this into google3) until that\u0027s been at least fixed in the google3 copy of Wycheproof.",
      "revId": "1f603458ac5ac59ca85e960456625b95b97f8b86",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "96d37422_c2fa3152",
        "filename": "third_party/wycheproof_testvectors/mldsa_65_standard_sign_test.json",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 5005
      },
      "writtenOn": "2024-08-16T20:51:16Z",
      "side": 1,
      "message": "Yea, we may need to #if 0 these tests out when cherry-picking into google3 for now. I would like to keep the tests in the open-source repo, however.",
      "parentUuid": "e3b87ffe_ba5b5988",
      "revId": "1f603458ac5ac59ca85e960456625b95b97f8b86",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    }
  ]
}